#! /usr/bin/env bash

import ast
import sys
import ssl
import socket
import time
import webbrowser
from bs4 import BeautifulSoup
from unidecode import unidecode

GOOGLE_API_KEY = "AIzaSyCgdShmwIXVVDUzR1zc_UXhxFwrdUTQ5Qc"
GOOGLE_CX = "c6319817e2afd4b56"
RESULTS_NR = 10
cached_responses = {}

def help():
    print("Available commands are:\n\
            go2web -u <URL>         # make an HTTP request to URL and print the response\n\
            go2web -s <search-term> # search the term and print top 10 results\n\
            go2web -h               # show help\n")
    

def url_request(url, max_redirects=2, redirect_count=0):
    
    # Check if the URL starts with http:// or https:// and remove it
    if url.startswith("https://"):  url = url[8:]
    elif url.startswith("http://"):  url = url[7:]
    
    # Split the URL into the host and path
    host, path = url.split('/', 1) if '/' in url else (url, "")
    
    # Create a SSL context
    context = ssl.create_default_context()

    # check if the response is available in the cache
    if url in cached_responses:
        cached_response, cached_time = cached_responses[url]
        current_time = time.time()
        # check if the cached response is still valid
        if current_time - cached_time < 300: 
            print("\n================== RETURNING CACHE RESPONSE ==================\n")
            print(cached_response)
            return

    # Create a socket connection and wrap it with SSL
    with socket.create_connection((host, 443)) as sock:
        with context.wrap_socket(sock, server_hostname=host) as sslsock:
            # Send a GET request to the server          
            request = f"GET /{path} HTTP/1.0\r\nHost: {host}\r\nAccept: text/html, application/json\r\n\r\n"
            sslsock.send(request.encode())     
            
            # Receive the response from the server
            response = bytearray()
            for data in iter(lambda: sslsock.recv(4096), b""):
                response.extend(data)
            
            # Decode the response and extract the status code
            response_str = response.decode('utf-8')
            status_code = int(response_str.split()[1])
            
            # Check if the response is a redirection
            if status_code >= 300 and status_code < 400:
                if 'Location' in response_str and redirect_count < max_redirects:
                    new_url = response_str.split('Location: ')[1].split()[0]
                    print(f"Redirecting to {new_url}...")
                    webbrowser.open(new_url)
                    url_request(new_url, max_redirects, redirect_count + 1)
                    print(f"\nPress enter to exit.")

                else:
                    print(f"Too many redirects for {url}.")

            else:
                # Extract the HTML content from the response
                soup = BeautifulSoup(response.split(b'\r\n\r\n', 1)[1].decode('utf-8'), 'html.parser')
                text = soup.get_text(separator='\n', strip=True)
                text = unidecode(text)
                print(text)

                # store the response in the cache
                cached_responses[url] = (text, time.time())

            # https://ulogin.ru/auth.php?name=vkontakte&code=bfc1a686d94d1c3571
            # https://jsonplaceholder.typicode.com/todos/1
    
def search(query):  
    #Define the host and SSL context

    host = "www.googleapis.com"
    context = ssl.create_default_context()
    
    # Establish a connection with the host and send an HTTP GET request
    with socket.create_connection((host, 443)) as sock:
        with context.wrap_socket(sock, server_hostname= host) as sslsock:
            # Compose the HTTP GET request to search for the query on Google Custom Search API
            request = f"GET https://www.googleapis.com/customsearch/v1?key={GOOGLE_API_KEY}&cx={GOOGLE_CX}&q={query} HTTP/1.0\r\nHost:{host}\r\nAccept: text/html, application/json\r\n\r\n"
            sslsock.send(request.encode()) 

            # Receive the response from the server and parse the JSON data
            resp_str = ''
            for data in iter(lambda: sslsock.recv(4096), b""):
                resp_str += data.decode('utf-8')

            json_start = resp_str.find("{")
            json_end = resp_str.rfind("}") + 1
            json_str = resp_str[json_start:json_end]     
                                 
            response = ast.literal_eval(json_str)        
                    
            print(f"Top {RESULTS_NR} search results for '{query}':\n")
            
            for i in range(1, RESULTS_NR + 1):
                item = response["items"][i-1]
                title = item.get("title", "No title available")
                link = item.get("link", "No link available")
                print(f"{i}. {title}")
                print(f"Link: {link}\n")
        
            # Store the links in a global list variable
            global link_list
            link_list = [item["link"] for item in response["items"]]
            
            # Call the access_link function to allow the user to open a link
            access_link()

def access_link():
    # Loop through the search results and prompt the user to choose a link to open
    for i in range(RESULTS_NR + 1):    
        print(f"Enter a number between 1 and {RESULTS_NR} to open a link, or 'exit' to exit.\n")   
        user_input = input()     
        if user_input == 'exit':
            break        
        try:
            # Convert the user's input to an integer and use it to open the corresponding link
            link_index = int(user_input) - 1
            if  0 <= link_index < RESULTS_NR:
                url_request(link_list[link_index])
            else:
                print(f"Invalid input. Please enter a number between 1 and {RESULTS_NR} or 'exit'.")          
        except:
            print(f"Invalid input. Please enter a number between 1 and {RESULTS_NR} or 'exit'.")   
            
def main():
    
    command = sys.argv
    
    if len(command) >= 3:      
        if command[1] == "-u":
            url_request(command[2])     
        elif command[1] == "-s":
            search('+'.join(command[2:]))          
        else:
            print("Invalid command")
            
    elif len(command) == 2 and command[1] == "-h":
        help()
        
    else:
        while True:
            user_input = input("Enter a command (enter go2web -h to see all commands) or 'exit' to exit:\n> ")
            command = user_input.split()
            if len(command) == 0:
                continue
            elif command[0] == "go2web":
                if len(command) >= 3:
                    if command[1] == "-u":
                        url_request(command[2])
                    elif command[1] == "-s":
                        search('+'.join(command[2:]))    
                    else:
                        print("Invalid command")                   
                elif len(command) == 2 and command[1] == "-h":
                        help()
                else:
                    print("Invalid command")
            elif command[0] == "exit":
                break
            else:
                print("Invalid command")

if __name__ == '__main__':
    main()    
